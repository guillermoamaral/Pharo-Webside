"
self startServer

self stopServer

"
Class {
	#name : #WebsideAPI,
	#superclass : #Object,
	#instVars : [
		'request',
		'server'
	],
	#category : #'Webside-Base'
}

{ #category : #services }
WebsideAPI class >> startServer [
	"
	self startServer
	"

^WebsideServer new
	baseUri: '/pharo';
	port: 9001;
	start.
]

{ #category : #services }
WebsideAPI class >> stopServer [
	"
	self stopServer
	"

	WebsideServer allInstances do: #stop
]

{ #category : #'debugging endpoints' }
WebsideAPI >> activeDebuggers [
	^ self debuggers associations
		collect: [ :a | 
			a value asWebsideJson
				at: 'id' put: a key asString;
				at: 'description' put: a value name;
				yourself ]
]

{ #category : #'evaluation  endpoints' }
WebsideAPI >> activeEvaluation [
	| id evaluation |
	id := self requestedId .
	evaluation := self evaluations at: id ifAbsent: [^self notFound].
	^self newJsonObject
				at: 'id' put: id asString;
				yourself 
]

{ #category : #'evaluation  endpoints' }
WebsideAPI >> activeEvaluations [
	^ self evaluations associations
		collect: [ :a | self newJsonObject at: 'id' put: a key asString ; yourself ]
]

{ #category : #'testing endpoints' }
WebsideAPI >> activeTestRuns [
	^ self testRuns associations
		collect: [ :a | 
			a value key asWebsideJson
				at: 'id' put: a key asString;
				yourself ]
]

{ #category : #'workspaces endpoints' }
WebsideAPI >> activeWorkspaces [
	^ self workspaces associations
		collect: [ :a | 
			a value asWebsideJson
				at: 'id' put: a key asString;
				yourself ]
]

{ #category : #'changes endpoints' }
WebsideAPI >> addChange [

	| change author |
	change := self requestedChange.
	change ifNil: [ ^ self badRequest: 'Change not supported' ].
	author := self bodyAt: 'author' ifAbsent: [ 'Unknown' ].
	Author useAuthor: author during: [
		[ change execute ]
			on: Exception - Halt
			do: [ :e | ^ self changeError: e from: change] ].
	"Temporary workaround until a better way of gathering system changes is implemented"
	server changes add: change.
	^ change asWebsideJson
]

{ #category : #'code endpoints' }
WebsideAPI >> allCategories [
	^  Smalltalk globals organization categories
]

{ #category : #private }
WebsideAPI >> annotationsForMethod: aCompiledMethod [
    aCompiledMethod isCompiledMethod ifFalse: [^#()].
	^ aCompiledMethod critiques
		  select: [ :c | c sourceAnchor providesInterval ]
		  thenCollect: [ :c | 
			  | interval type |
			  interval := c sourceAnchor interval.
			  type := c rule severity == #error ifTrue: ['error'] ifFalse: ['warning'].
				"The severity could be #information, #warning or #error, but for the moment, the frontend only handles warnings.
				On the other hand, error"
			  self newJsonObject
				  at: 'from' put: interval first;
				  at: 'to' put: interval last;
				  at: 'type' put: 'warning';
				  at: 'description' put: c title;
				  yourself ]
]

{ #category : #'code endpoints' }
WebsideAPI >> autocompletions [

	| class source position completion entries n |
	class := (self bodyAt: 'class') ifNotNil: [ :name | 
		         self classNamed: name ].
	source := self
		          bodyAt: 'source'
		          ifAbsent: [ ^ self badRequest: 'missing source' ].
	position := self
		            bodyAt: 'position'
		            ifAbsent: [ ^ self badRequest: 'missing position' ].
	completion := CompletionContext
		              engine: CompletionEngine new
		              class: class
		              source: source
		              position: position.
	entries := completion entries.
	n := 20 min: entries size.
	^ (entries copyFrom: 1 to: n) collect: #asWebsideJson
]

{ #category : #private }
WebsideAPI >> badRequest: aString [
	^ZnResponse 
	badRequest: request 
		entity: (ZnEntity textCRLF: aString)
]

{ #category : #private }
WebsideAPI >> bodyAt: aString [
	^ self bodyAt: aString ifAbsent: nil
]

{ #category : #private }
WebsideAPI >> bodyAt: aString ifAbsent: aBlock [
	| json |
	json := NeoJSONReader fromString: request entity.
	^ json at: aString ifAbsent: aBlock
]

{ #category : #private }
WebsideAPI >> buildTestSuiteForPackage: package [
	| suite |
	suite := TestSuite named: package name.
	package definedClasses
		select: [ :c | c isTestCase ]
		thenDo: [ :c | suite addTest: c buildSuiteFromSelectors ].
	package extensionMethods
		select: [ :m | m isTestMethod ]
		thenDo: [ :m | suite addTest: m ].
	^ suite
]

{ #category : #'evaluation  endpoints' }
WebsideAPI >> cancelEvaluation [
	| id evaluation |
	id := self requestedId.
	evaluation := self evaluations at: id ifAbsent: [ ^ self notFound ].
	evaluation terminate.
	self evaluations removeKey: id.
	^ nil
]

{ #category : #'code endpoints' }
WebsideAPI >> categories [
	| class |
	class := self requestedClass.
	class ifNil: [^self notFound].
	^class protocols
]

{ #category : #private }
WebsideAPI >> changeError: error from: change [

	| json suggestions data type entity |
	json := error asWebsideJson.
	((error isKindOf: OCUndeclaredVariableWarning) and: [ change isKindOf: RBAddMethodChange ]) ifTrue: [
		suggestions := self declareVariableSuggestionsFrom: error.
		suggestions ifNotNil: [ json at: 'suggestions' put: suggestions ] ].
	data := NeoJSONWriter toString: json.
	type := ZnMimeType applicationJson
		        charSet: 'utf-8';
		        yourself.
	entity := ZnStringEntity with: data type: type.
	^ (ZnResponse statusCode: 409) entity: entity
]

{ #category : #'changes endpoints' }
WebsideAPI >> changes [

	| author changes |
	author := self queryAt: 'author'.
	changes := EpMonitor current log entries select: [ :e | 
		           e content isCodeChange ].
	"Temporary workaround until a better way of gathering changes is implemented"
	changes := server changes.
	author ifNotNil: [ 
		changes := changes select: [ :ch | ch author = author ] ].
	^ changes collect: #asWebsideJson
]

{ #category : #'code endpoints' }
WebsideAPI >> classDefinition [
	| class |
	class := self requestedClass.
	class ifNil: [^self notFound].
	^class asWebsideJson
]

{ #category : #private }
WebsideAPI >> classNamed: aString [
	| name metaclass class |
	name := aString.
	metaclass := name endsWith: ' class'.
	metaclass
		ifTrue: [ name := name withoutSuffix: ' class' ].
	class := Smalltalk at: name asSymbol ifAbsent: [ ^ nil 
		].
	^ metaclass
		ifTrue: [ class class ]
		ifFalse: [ class ]
]

{ #category : #'code endpoints' }
WebsideAPI >> classTemplate [
	| package |
	package := self queryAt: 'package'.
	package ifNil: [ ^self badRequest: 'no package specified'].
	^self newJsonObject
		at: 'template' put: true;
		at: 'name' put: 'MyClass';
		at: 'definition'
		put: 'Object
	subclass: #MyClass
	instanceVariableNames: ''''
	classVariableNames: ''''
	package: ''', package , '''';
		yourself
]

{ #category : #private }
WebsideAPI >> classTreeFrom: aClass depth: anInteger [
	| json subclasses depth names |
	names := self queryAt: 'names'.
	json := names = 'true'
		ifTrue: [ self newJsonObject
			
				at: 'name' put: aClass name;
				at: 'superclass'
					put: (aClass superclass ifNotNil: [ :c | c name ]); yourself ]
		ifFalse: [ aClass asWebsideJson ].
	(anInteger notNil and: [ anInteger = 0 ])
		ifTrue: [ ^ json ].
	depth := anInteger notNil
		ifTrue: [ anInteger - 1 ].
	subclasses := (aClass subclasses sort: [ :a :b | a name <= b name ])
		collect: [ :c | self classTreeFrom: c depth: depth ].
	json at: 'subclasses' put: subclasses.
	^ json
]

{ #category : #private }
WebsideAPI >> classTreeFromClasses: aCollection [

	| roots json subclasses removable |
	roots := Dictionary new.
	removable := Set new.
	aCollection
		do: [ :c |
			json := self newJsonObject
				        at: 'name' put: c name;
				        yourself.
			roots at: c name put: json ];
		select: [ :c | c superclass notNil ] thenDo: [ :c |
		roots at: c superclass name ifPresent: [ :sc |
			subclasses := sc
				              at: 'subclasses'
				              ifAbsentPut: [
				              SortedCollection new sortBlock: [ :a :b |
					              a name <= b name ] ].
			subclasses add: (roots at: c name).
			removable add: c name ] ].
		removable do: [ :n |
		
			roots removeKey: n ] .
	^ roots asArray sort: [ :a :b | a name <= b name ]
]

{ #category : #'code endpoints' }
WebsideAPI >> classVariables [
	| class |
	class := self requestedClass.
	class ifNil: [ ^ self notFound ].
	^ class withAllSuperclasses
		gather: [ :c | 
			c classVarNames asArray sort
				collect: [ :v | 
					self newJsonObject
						at: 'name' put: v;
						at: 'class' put: c name , ' class';
						at: 'type' put: 'class';
						yourself ] ]
]

{ #category : #'code endpoints' }
WebsideAPI >> classes [

	| root tree classes names depth json |
	root := self queryAt: 'root'.
	root := root ifNil: [self defaultRootClass] ifNotNil: [ self classNamed: root ].
	root ifNil: [ ^ self notFound ].
	tree := self queryAt: 'tree'.
	tree = 'true' ifTrue: [ 
		depth := self queryAt: 'depth' ifPresent: [ :d | d asInteger ].
		json := self classTreeFrom: root depth: depth.
		^ Array with: json ].
	classes := root withAllSubclasses reject: [:c | c isMeta ].
	names := self queryAt: 'names'.
    names = 'true' ifTrue: [ ^ (classes collect: [:c | c name ]) sort].
    ^ classes collect: [:c | c asWebsideJson]
]

{ #category : #'general endpoints' }
WebsideAPI >> colors [
	^self newJsonObject
		at: 'primary' put: '#3297d4';
		at: 'secondary' put: '#1565c0';
		yourself
]

{ #category : #private }
WebsideAPI >> compiler [
	^ OpalCompiler new
		noPattern: true;
		receiver: self compilerReceiver;
		requestor: self compilerRequestor
]

{ #category : #private }
WebsideAPI >> compilerReceiver [
	| context index debugger frame |
	context := self bodyAt: 'context' ifAbsent: [ ^ nil ].
	context at: 'class' ifPresent: [ :name | ^ self classNamed: name ].
	context
		at: 'object'
		ifPresent: [ :path | ^ self objectFromPath: path ].
	context
		at: 'debugger'
		ifPresent: [ :id | 
			index := context at: 'frame' ifAbsent: [ ^ nil ].
			debugger := self debuggers
				at: (UUID fromString: id)
				ifAbsent: [ ^ nil ].
			frame := debugger stack at: index asInteger ifAbsent: nil.
			^ frame ifNotNil: [ frame receiver ] ].
	^ nil
]

{ #category : #private }
WebsideAPI >> compilerRequestor [
	| context |
	context := self bodyAt: 'context' ifAbsent: [ ^ nil ].
	^ context
		at: 'workspace'
		ifPresent: [ :id | self workspaces at: (UUID fromString: id) ifAbsent: [ nil ] ]
		ifAbsent: [ nil ]
]

{ #category : #'debugging endpoints' }
WebsideAPI >> createDebugger [

	| id process exception context debugger |
	id := self bodyAt: 'evaluation' ifAbsent: [ ^ self notFound ].
	id := UUID fromString: id.
	process := self evaluations at: id ifAbsent: [ ^ self notFound ].
	exception := process suspendedContext exception.
	context := exception signalerContext.
	"process suspendedContext: context."
	context selector == #doesNotUnderstand: ifTrue: [ 
		context := context sender ].
	debugger := process
		            newDebugSessionNamed: exception description
		            startedAt: context.
	context selector == #halt ifTrue: [ 
		debugger restart: context.
		debugger
			stepOver;
			stepOver ].
	self debuggers at: id put: debugger.
	^ debugger asWebsideJson
		  at: 'id' put: id asString;
		  at: 'description' put: debugger name;
		  yourself
]

{ #category : #'workspaces endpoints' }
WebsideAPI >> createWorkspace [

	| id workspace |
	id := self newID.
	workspace := Workspace new.
	self workspaces at: id put: workspace.
	^ workspace asWebsideJson
		  at: 'id' put: id asString;
		  yourself
]

{ #category : #private }
WebsideAPI >> customPresentationsOf: anObject [
	^anObject websidePresentations
]

{ #category : #private }
WebsideAPI >> debugExpression [
	| expression method receiver process context debugger id |
	expression := self bodyAt: 'expression' ifAbsent: [''].
	method := self compiler compile: expression.
	receiver := self compilerReceiver.
	process := [ method valueWithReceiver: receiver arguments: #() ]
		newProcess.
	context := process suspendedContext.
	debugger := process
		newDebugSessionNamed: 'debug it'
		startedAt: context.
	debugger stepIntoUntil: [ :c | c method == method ].
	id := self newID.
	self evaluations at: id put: process.
	self debuggers at: id put: debugger.
	^ id asString
]

{ #category : #'testing endpoints' }
WebsideAPI >> debugTest [

	| id run class selector semaphore exception process block context debugger |
	id := self requestedId.
	run := self testRuns at: id ifAbsent: [ ^ self notFound ].
	class := self classNamed: (self bodyAt: 'class').
	class ifNil: [ ^ self notFound ].
	selector := (self bodyAt: 'selector') asSymbol.
	"test := run suite allCases
		detect: [:t | t class == class and: [t selector == selector]]
		ifNone: [^self notFound]."
	semaphore := Semaphore new.
	block := [ 
	         [ class debug: selector ]
		         on: Exception
		         do: [ :e | 
			         semaphore signal.
			         exception := e.
			         process
				         suspendedContext: e signalerContext;
				         suspend ] ].
	process := block newProcess.
	process resume.
	semaphore wait.
	context := exception signalerContext.
	debugger := process
		            newDebugSessionNamed: exception description
		            startedAt: context.
	context selector == #doesNotUnderstand: ifTrue: [ 
		context := context sender ].
	debugger restart: context.
	context selector == #halt ifTrue: [ 
		debugger
			stepOver;
			stepOver ].
	self debuggers at: id put: debugger.
	^ debugger asWebsideJson
		  at: 'id' put: id asString;
		  at: 'description' put: exception description;
		  yourself
]

{ #category : #'debugging endpoints' }
WebsideAPI >> debuggerFrame [

	| debugger index frame interval  json  method |
	debugger := self debuggers
		            at: self requestedId
		            ifAbsent: [ ^ self notFound ].
	index := self requestedIndex.
	frame := debugger stack at: index ifAbsent: [ ^ self notFound ].
	interval := debugger pcRangeForContext: frame.
	interval := self newJsonObject
		            at: 'start' put: interval first;
		            at: 'end' put: interval last;
		            yourself.
	json := frame asWebsideJson.
	json 
          at: 'index' put: index;
		  at: 'interval' put: interval.
	method := json
		at: 'method'
		ifAbsent: [].
    method ifNotNil: [:m |
          m
            at: 'ast' put: frame method ast asWebsideJson;
			at: 'annotations'
			put: (self annotationsForMethod: frame method)].
	^json
]

{ #category : #'debugging endpoints' }
WebsideAPI >> debuggerFrames [
	| debugger |
	debugger := self debuggers
		at: self requestedId
		ifAbsent: [ ^ self notFound ].
	^ debugger stack
		withIndexCollect: [ :f :i | 
			self newJsonObject
				at: 'index' put: i;
				at: 'label' put: f method printString;
				yourself ]
]

{ #category : #private }
WebsideAPI >> debuggers [
	^ server debuggers
]

{ #category : #private }
WebsideAPI >> declareVariableSuggestionsFrom: anOCUndeclaredVariableWarning [

	| original identifier temporary instance |
	original := self requestedChange.
	identifier := anOCUndeclaredVariableWarning node name.
	identifier first isLowercase ifFalse: [ ^ nil ].
	temporary := self newJsonObject.
	temporary
		at: 'description'
		put: 'Declare ' , identifier printString , ' as temporary variable';
		at: 'changes'
		put:
			{ (self methodChangeFrom: original withTemp: identifier)
				asWebsideJson }.
	instance := self newJsonObject.
	instance
		at: 'description'
		put: 'Declare ' , identifier printString , ' as instance variable';
		at: 'changes' put: { 
				(RBAddInstanceVariableChange
					 add: identifier
					 to: original changeClass) asWebsideJson.
				original asWebsideJson }.
	^ { 
		  temporary.
		  instance }
]

{ #category : #private }
WebsideAPI >> defaultRootClass [
	^Object
]

{ #category : #'debugging endpoints' }
WebsideAPI >> deleteDebugger [
	| id debugger |
	id := self requestedId.
	debugger := self debuggers at: id ifAbsent: nil.
	debugger notNil
		ifTrue: [ debugger terminate.
			self debuggers removeKey: id ifAbsent: nil.
			self evaluations removeKey: id ifAbsent: nil ].
	^ id
]

{ #category : #'testing endpoints' }
WebsideAPI >> deleteTestRun [
	self testRuns
		removeKey: self requestedId
		ifAbsent: [ ^ self notFound ].
	^ nil
]

{ #category : #'workspaces endpoints' }
WebsideAPI >> deleteWorkspace [
	self workspaces
		removeKey: self requestedId
		ifAbsent: [ ^ self notFound ].
	^ nil
]

{ #category : #'general endpoints' }
WebsideAPI >> dialect [
	^'Pharo'
]

{ #category : #private }
WebsideAPI >> doesMethod: aCompiledMethod accessVariable: variable for: aSymbol [
	aSymbol == #referencing
		ifTrue: [ ^ (variable isReadIn: aCompiledMethod) or: [  (variable isWrittenIn: aCompiledMethod)] ].
	aSymbol == #using
		ifTrue: [ ^ variable isReadIn: aCompiledMethod ].
	aSymbol == #assigning
		ifTrue: [ ^ variable isWrittenIn: aCompiledMethod ].
	self error: 'not valid access type: ' , aSymbol
]

{ #category : #'evaluation  endpoints' }
WebsideAPI >> evaluateExpression [

	| debug expression sync pin id semaphore object process block json |
	debug := self bodyAt: 'debug'.
	debug == true ifTrue: [ ^ self debugExpression ].
	expression := self bodyAt: 'expression'.
	sync := (self bodyAt: 'sync') ifNil: [ true ].
	pin := (self bodyAt: 'pin') ifNil: [ false ].
	id := self newID.
	semaphore := Semaphore new.
	block := [
	         [ object :=  self compiler evaluate: expression ]
		         on: Exception
		         do: [ :exception |
			         semaphore signal.
			         process
				         suspendedContext: exception signalerContext;
				         suspend ].
	         self evaluations removeKey: id ifAbsent: nil.
	         (sync not or: [ pin ]) ifTrue: [
		         self objects at: id put: object ].
	         semaphore signal.
	         object ].
	process := block newProcess.
	self evaluations at: id put: process.
	process resume.
	sync ifTrue: [
		semaphore wait.
		object ifNil: [ ^ self evaluationError: id ].
		json := object asWebsideJson.
		pin ifTrue: [ json at: 'id' put: id asString ].
		^ json ].
	^ self newJsonObject
		  at: 'id' put: id asString;
		  at: 'expression' put: expression;
		  yourself
]

{ #category : #private }
WebsideAPI >> evaluationError: id [

	| process json entity |
	process := self evaluations at: id.
	json := self newJsonObject
		        at: 'description'
		        put: process suspendedContext exception description;
		        at: 'evaluation' put: id asString;
		        yourself.
	entity := ZnStringEntity
		          with: (NeoJSONWriter toString: json)
		          type: (ZnMimeType applicationJson
				           charSet: 'utf-8';
				           yourself).
	^ ZnResponse serverErrorWithEntity: entity
]

{ #category : #private }
WebsideAPI >> evaluations [
	^server evaluations
]

{ #category : #'extensions endpoints' }
WebsideAPI >> extensions [
	"The following are examples (yet valid/valuable) of how to extend the set of changes predefined by the API.
  For more information, check API documentation at https://github.com/guillermoamaral/Webside."

	^ OrderedCollection new
		  add: (self newJsonObject
				   at: 'extensionType' put: 'change';
				   at: 'elementType' put: 'class';
				   at: 'label' put: 'Insert superclass';
				   at: 'properties' put: (self newJsonObject
						    at: 'type' put: 'InsertClass';
						    at: 'className' put: '{element.name}';
						    at: 'newName' put: '{parameters.newName}';
						    yourself);
				   at: 'parameters' put: { (self newJsonObject
					    at: 'name' put: 'newName';
					    at: 'label' put: 'New class name';
					    at: 'type' put: 'text';
					    yourself) };
				   at: 'section' put: 'Refactorings';
				   yourself);
		  add: (self newJsonObject
				   at: 'extensionType' put: 'change';
				   at: 'elementType' put: 'class';
				   at: 'label' put: 'Move to package';
				   at: 'properties' put: (self newJsonObject
						    at: 'type' put: 'MoveClassToGroup';
						    at: 'className' put: '{element.name}';
						    at: 'package' put: '{parameters.package}';
						    yourself);
				   at: 'parameters' put: { (self newJsonObject
					    at: 'name' put: 'package';
					    at: 'label' put: 'Target package';
					    at: 'type' put: 'text';
                        at: 'options' put: '{packages}';
					    yourself) };
				   at: 'section' put: 'Refactorings';
				   yourself);
		  add: (self newJsonObject
				   at: 'extensionType' put: 'change';
				   at: 'elementType' put: 'method';
				   at: 'label' put: 'Push up';
				   at: 'properties' put: (self newJsonObject
						    at: 'type' put: 'PullUpMethod';
						    at: 'className' put: '{element.methodClass}';
						    at: 'selector' put: '{element.selector}';
						    yourself);
				   at: 'section' put: 'Refactorings';
				   yourself);
		  add: (self newJsonObject
				   at: 'extensionType' put: 'change';
				   at: 'elementType' put: 'method';
				   at: 'label' put: 'Push down';
				   at: 'properties' put: (self newJsonObject
						    at: 'type' put: 'PushDownMethod';
						    at: 'className' put: '{element.methodClass}';
						    at: 'selector' put: '{element.selector}';
						    yourself);
				   at: 'section' put: 'Refactorings';
				   yourself);
		  add: (self newJsonObject
				   at: 'extensionType' put: 'change';
				   at: 'elementType' put: 'method';
				   at: 'label' put: 'Move to another class';
				   at: 'properties' put: (self newJsonObject
						    at: 'type' put: 'MoveMethodToClass';
						    at: 'className' put: '{element.methodClass}';
                            at: 'selector' put: '{element.selector}';
						    at: 'newName' put: '{parameters.newName}';
						    yourself);
				   at: 'parameters' put: { (self newJsonObject
					    at: 'name' put: 'newName';
					    at: 'label' put: 'Target class name';
					    at: 'type' put: 'text';
                        at: 'options' put: '{classes}';
					    yourself) };
				   at: 'section' put: 'Refactorings';
				   yourself);
		  add: (self newJsonObject
				   at: 'extensionType' put: 'change';
				   at: 'elementType' put: 'method';
				   at: 'label' put: 'Move to class side';
				   at: 'properties' put: (self newJsonObject
						    at: 'type' put: 'MoveMethodToClassSide';
						    at: 'className' put: '{element.methodClass}';
                            at: 'selector' put: '{element.selector}';
						    yourself);
				   at: 'section' put: 'Refactorings';
				   yourself);
		  add: (self newJsonObject
				   at: 'extensionType' put: 'change';
				   at: 'elementType' put: 'method';
				   at: 'label' put: 'Move to package';
				   at: 'properties' put: (self newJsonObject
						    at: 'type' put: 'MoveMethodsToPackage';
						    at: 'className' put: '{element.methodClass}';
                            at: 'selector' put: '{element.selector}';
						    at: 'package' put: '{parameters.package}';
						    yourself);
				   at: 'parameters' put: { (self newJsonObject
					    at: 'name' put: 'package';
					    at: 'label' put: 'Target pacakge';
					    at: 'type' put: 'text';
                        at: 'options' put: '{packages}';
					    yourself) };
				   at: 'section' put: 'Refactorings';
				   yourself);
		  yourself
]

{ #category : #private }
WebsideAPI >> filterByCategory: aCollection [
	| category |
	category := self queriedCategory.
	^(category notNil and: [category notEmpty])
		ifTrue: [aCollection select: [:m | m category = category]]
		ifFalse: [aCollection]
]

{ #category : #private }
WebsideAPI >> filterByVariable: aCollection [
	| accessing using assigning filtered |
	accessing := self queriedAccessing .
	using := self queriedUsing.
	assigning := self queriedAssigning.
	(accessing isNil and: [ using isNil and: [ assigning isNil ] ])
		ifTrue: [ ^ aCollection ].
	filtered := Set new.
	accessing notNil
		ifTrue: [ filtered
				addAll:
					(self
						filterMethods: aCollection
						byAccessTo: accessing
						type: #referencing) ].
	using notNil
		ifTrue: [ filtered
				addAll: (self filterMethods: aCollection byAccessTo: using type: #using) ].
	assigning notNil
		ifTrue: [ filtered
				addAll:
					(self
						filterMethods: aCollection
						byAccessTo: assigning
						type: #assigning) ].
	^ filtered
]

{ #category : #private }
WebsideAPI >> filterMethods: aCollection byAccessTo: aString type: aSymbol [
	| groupped filtered slot variable |
	groupped := Dictionary new.
	aCollection
		do: [ :m | 
			(groupped at: m methodClass ifAbsentPut: [ OrderedCollection new ])
				add: m ].
	filtered := OrderedCollection new.
	groupped
		keysAndValuesDo: [ :class :methods | 
			(class hasSlotNamed: aString)
				ifTrue: [ slot := class slotNamed: aString.
					filtered
						addAll:
							(methods
								select: [ :m | self doesMethod: m accessVariable: slot for: aSymbol ]) ].
			(class classVarNames includes: aString)
				ifTrue: [ variable := class classVariableNamed: aString.
					filtered addAll: (methods
						select: [ :m | self doesMethod: m accessVariable: variable for: aSymbol ]
						 )] ].
	^ filtered
]

{ #category : #'debugging endpoints' }
WebsideAPI >> frameBindings [

	| debugger frame |
	debugger := self debuggers
		            at: self requestedId
		            ifAbsent: [ ^ self notFound ].
	frame := debugger stack
		         at: self requestedIndex
		         ifAbsent: [ ^ self notFound ].

	^ (StDebuggerContext context: frame) buildInspectorNodes collect: [ 
		  :b | 
		  self newJsonObject
			  at: 'name' put: b key asString;
			  at: 'value' put: b value printString;
			  yourself ]
]

{ #category : #private }
WebsideAPI >> implementorsOf: aSymbol [
	| scope |
	scope := self queriedScope.
	^ scope
		ifNotNil: [ scope implementorsOf: aSymbol ]
		ifNil: [ SystemNavigation default allImplementorsOf: aSymbol ]
]

{ #category : #private }
WebsideAPI >> indexedSlotsOf: anObject [

	| from to slot |
	anObject class isVariable ifFalse: [ ^ self notFound ].
	from := self
		        queryAt: 'from'
		        ifPresent: [ :f | f asInteger ]
		        ifAbsent: [ 1 ].
	to := self
		      queryAt: 'to'
		      ifPresent: [ :t | t asInteger ]
		      ifAbsent: [ anObject size ].
	^ (from to: to) collect: [ :i | 
		  slot := anObject basicAt: i.
		  slot asWebsideJson
			  at: 'slot' put: i;
			  yourself ]
]

{ #category : #'code endpoints' }
WebsideAPI >> instanceVariables [
	| class |
	class := self requestedClass.
	class ifNil: [ ^ self notFound ].
	^ class withAllSuperclasses
		gather: [ :c | 
			c instVarNames
				collect: [ :v | 
					self newJsonObject
						at: 'name' put: v;
						at: 'class' put: c name;
						at: 'type' put: 'instance';
						yourself ] ]
]

{ #category : #private }
WebsideAPI >> instanceVariablesOf: anObject [
^anObject class allInstVarNames
		collect: [ :n | 
			self newJsonObject
				at: 'name' put: n;
				yourself ]
]

{ #category : #private }
WebsideAPI >> jsonFromMethods: aCollection [
     | ast  annotations  json | 
	ast := (self queryAt: 'ast') = 'true'.
	annotations := (self queryAt: 'annotations') = 'true'.
	^ aCollection collect: [ :m | 
		  json := m asWebsideJson.
		  ast ifTrue: [ json at: 'ast' put: m ast asWebsideJson ].
		  annotations
			ifTrue: [json at: 'annotations' put: (self annotationsForMethod: m)].
			 json ]
]

{ #category : #'general endpoints' }
WebsideAPI >> logo [

	^ ''
]

{ #category : #'code endpoints' }
WebsideAPI >> method [
	| class selector json |
	class := self requestedClass.
	class ifNil: [ ^ self notFound ].
	selector := self requestedSelector.
	selector ifNil: [ ^ self notFound ].
	(class includesSelector: selector)
		ifFalse: [ ^ self notFound ].
	json := self jsonFromMethods: {class >> selector}.
	^ json first
]

{ #category : #private }
WebsideAPI >> methodChangeFrom: anRBAddMethodChange withTemp: aString [

	| original ast declaration position source head tail newSource |
	original := self requestedChange.
	ast := RBParser parseMethod: anRBAddMethodChange source.
	declaration := ast temporaries isEmpty
		               ifTrue: [ 
			               ' | ' , aString , ' | 
	' ]
		               ifFalse: [ ' ' , aString , ' ' ].
	position := ast body rightBar ifNil: [ ast body start ].
	source := ast sourceCode.
	head := source copyFrom: 1 to: position - 1.
	tail := source copyFrom: position to: source size.
	newSource := head , declaration , tail.
	^ original copy
		  instVarNamed: 'source' put: newSource;
		  yourself
]

{ #category : #'code endpoints' }
WebsideAPI >> methodTemplate [
	^self newJsonObject
		at: 'template' put: true;
		at: 'selector' put: 'methodSelectorAndArgumentNames';
		at: 'source'
		put: 'methodSelectorAndArgumentNames
	"comment stating purpose of instance-side method"
	"scope: class-variables  &  instance-variables"

	| temporary variable names |
	statements';
		yourself
]

{ #category : #'code endpoints' }
WebsideAPI >> methods [

	| methods class |
	self queriedSelectorMatching ifNotNil: [ :pattern |
		methods := self methodsWithSelectorMatching: pattern ].
	self queriedReferencingString ifNotNil: [ :string |
		methods := methods
			           ifNil: [ self referencesToString: string ]
			           ifNotNil: [
			           self referencesToString: string among: methods ] ].
	self queriedSelector ifNotNil: [ :selector |
		methods := methods
			           ifNil: [ self implementorsOf: selector ]
			           ifNotNil: [
			           methods select: [ :m | m selector = selector ] ] ].
	self queriedSending ifNotNil: [ :selector |
		methods := methods
			           ifNil: [ self sendersOf: selector ]
			           ifNotNil: [ self sendersOf: selector among: methods ] ].
	self queriedReferencingClass ifNotNil: [ :global |
		methods := methods
			           ifNil: [ self referencesToClass: global ]
			           ifNotNil: [
			           self referencesToClass: global among: methods ] ].
	class := self requestedClass ifNil: [ self queriedClass ].
	(class notNil and: [ methods notNil ]) ifTrue: [
		methods := methods select: [ :m | m methodClass == class ] ].
	methods ifNil: [
		methods := (class ifNil: [ self defaultRootClass ]) methodDictionary
			           asArray ].
	methods := self filterByCategory: methods.
	methods := self filterByVariable: methods.
	(self queryAt: 'count') = 'true' ifTrue: [ ^methods size ].
	^ self jsonFromMethods: methods
]

{ #category : #private }
WebsideAPI >> methodsWithSelectorMatching: aString [
^(RBBrowserEnvironment new implementorsMatching: '*',aString, '*') methods
]

{ #category : #private }
WebsideAPI >> nameForTestSuite [
	| packages classes methods m |
	packages := self bodyAt: 'packages' ifAbsent: [#()].
	classes := self bodyAt: 'classes' ifAbsent: [#()].
	methods := self bodyAt: 'methods' ifAbsent: [#()].
	(packages size = 1 and: [classes isEmpty and: [methods isEmpty]])
		ifTrue: [^packages first].
	(packages isEmpty and: [classes size = 1 and: [methods isEmpty]])
		ifTrue: [^classes first].
	(packages isEmpty and: [classes isEmpty and: [methods size = 1]]) ifTrue: [
		m := methods first.
		^(m at: 'class' ifAbsent: '') , ' >> #' , (m at: 'selector' ifAbsent: '')].
	^'Custom Suite'
]

{ #category : #private }
WebsideAPI >> namedSlotsOf: anObject [
	| slot |
	^anObject class allInstVarNames collect: [ :n |
		slot := self slot: n of: anObject ifAbsent: nil.
		slot asWebsideJson at: 'slot' put: n; yourself  ]
]

{ #category : #private }
WebsideAPI >> newID [
	^UUID new
]

{ #category : #private }
WebsideAPI >> newJsonObject [
	^NeoJSONObject new
]

{ #category : #private }
WebsideAPI >> notFound [
	^ZnResponse notFound: 'resource not found'
]

{ #category : #private }
WebsideAPI >> objectFromPath: uri [
	| path id slot |
 	path := uri substrings: '/'.
	id := UUID fromString: path first.
    slot := self objects at: id ifAbsent: [^nil].
	slot isNil ifTrue: [^nil].
	path
		from: 2
		to: path size
		do: [:s | slot := self slot: s of: slot ifAbsent: [^nil]].
	^slot
]

{ #category : #private }
WebsideAPI >> objects [
	^server objects
]

{ #category : #'code endpoints' }
WebsideAPI >> package [
	| package |
	package := self requestedPackage.
	package ifNil: [ ^ self notFound ].
	^ package asWebsideJson
]

{ #category : #'code endpoints' }
WebsideAPI >> packageClasses [

	| package defined extended extensions tree names instance |
	package := self requestedPackage.
	package ifNil: [ ^ self notFound ].
	defined := OrderedCollection withAll: package definedClasses.
	extended := self queryAt: 'extended'.
	extensions := extended = 'true'
		              ifTrue: [ 
						instance := package extendedClasses collect:  [ :c | c instanceSide  ].
		              (OrderedCollection withAll: instance) removeDuplicates  ]
		              ifFalse: [ #(  ) ].
	tree := self queryAt: 'tree'.
	tree = 'true' ifTrue: [ 
		^ (self classTreeFromClasses: defined)
		  , (self classTreeFromClasses: extensions) ].
	names := self queryAt: 'names'.
	names = 'true' ifTrue: [ 
    ^ (defined , extensions collect: [:c | c name]) sort ].
    ^ defined , extensions collect: [:c | c asWebsideJson]
]

{ #category : #'code endpoints' }
WebsideAPI >> packageMethods [
	| package |
	package := self requestedPackage.
	package ifNil: [ ^ self notFound ].
    ^ package extensionMethods collect: [:m | m asWebsideJson]
]

{ #category : #private }
WebsideAPI >> packageNamed: aString [
^
RPackageOrganizer default packageNamed: aString ifAbsent: nil

]

{ #category : #'code endpoints' }
WebsideAPI >> packages [
	|  packages names |
	packages := RPackageOrganizer default packages.
	names := self queryAt: 'names'.
	names = 'true'
    ifTrue: [ ^ (packages collect: [:p | p name]) sort ].
    ^ packages collect: [:p | p asWebsideJson]
]

{ #category : #'objects endpoints' }
WebsideAPI >> pinObjectSlot [
	| slot id |
	slot := self requestedSlot.
	slot ifNil: [ ^ self badRequest: 'Bad object slot URI' ].
	id := self newID.
	self objects at: id put: slot.
	^ slot asWebsideJson
		at: 'id' put: id asString;
		yourself
]

{ #category : #'objects endpoints' }
WebsideAPI >> pinnedObject [

	| id object |

	id := self requestedId.
	self evaluations at: id ifPresent: [ :process |
		process isSuspended ifTrue: [ ^ self evaluationError: id ] ].
	object := self objects at: id ifAbsent: [ ^ self notFound ].
	^ object asWebsideJson
		  at: 'id' put: id asString;
		  yourself
]

{ #category : #'objects endpoints' }
WebsideAPI >> pinnedObjectSlots [

	| id object path index last |

	id := self requestedId.
	object := self objects at: id ifAbsent: [ ^ self notFound ].
	path := request url segments.
	index := path indexOf: 'objects'.
	path from: index + 2 to: path size - 1 do: [ :s | 
		object := self slot: s of: object ifAbsent: [ ^ self notFound ] ].
	last := path last.
	last = 'instance-variables' ifTrue: [ 
		^ self instanceVariablesOf: object ].
	last = 'named-slots' ifTrue: [ ^ self namedSlotsOf: object ].
	last = 'indexed-slots' ifTrue: [ ^ self indexedSlotsOf: object ].
    last = 'custom-presentations' ifTrue: [^self customPresentationsOf: object].
	object := self slot: last of: object ifAbsent: [ ^ self notFound ].
	^ object asWebsideJson
]

{ #category : #'objects endpoints' }
WebsideAPI >> pinnedObjects [
	^ self objects
		associations collect: [ :a | 
			a value asWebsideJson
				at: 'id' put: a key asString;
				yourself ]
]

{ #category : #private }
WebsideAPI >> queriedAccessing [
	^ self queryAt: 'accessing'
]

{ #category : #private }
WebsideAPI >> queriedAssigning [
	^ self queryAt: 'assigning'
]

{ #category : #private }
WebsideAPI >> queriedCategory [
	^self queryAt: 'category' ifPresent: [:c | c asSymbol]
]

{ #category : #private }
WebsideAPI >> queriedClass [
	^self queryAt: 'class' ifPresent: [:n | self classNamed: n]
]

{ #category : #private }
WebsideAPI >> queriedReferencingClass [
	^self queryAt: 'referencingClass' ifPresent: [:n | self classNamed: n ]
]

{ #category : #private }
WebsideAPI >> queriedReferencingString [
	^ self queryAt: 'referencingString'
]

{ #category : #private }
WebsideAPI >> queriedScope [
	^self queryAt: 'scope' ifPresent: [:s | self classNamed: s ]
]

{ #category : #private }
WebsideAPI >> queriedSelector [
	^self queryAt: 'selector' ifPresent: [:s | s asSymbol]
]

{ #category : #private }
WebsideAPI >> queriedSelectorMatching [
	^self queryAt: 'selectorMatching'
]

{ #category : #private }
WebsideAPI >> queriedSending [
	^self queryAt: 'sending' ifPresent: [:s | s asSymbol]
]

{ #category : #private }
WebsideAPI >> queriedUsing [
	^ self queryAt: 'using'
]

{ #category : #private }
WebsideAPI >> queryAt: aString [
	^ self queryAt: aString ifAbsent: nil
]

{ #category : #private }
WebsideAPI >> queryAt: aString ifAbsent: aBlock [
	^ self queryAt: aString ifPresent: nil ifAbsent: aBlock
]

{ #category : #private }
WebsideAPI >> queryAt: aString ifPresent: aBlock [
	^ self queryAt: aString ifPresent: aBlock ifAbsent: nil
]

{ #category : #private }
WebsideAPI >> queryAt: aString ifPresent: aBlock ifAbsent: anotherBlock [
	| value |
	value := request at: aString ifAbsent: nil.
	value ifNil: [ ^ anotherBlock value ].
	^ aBlock notNil
		ifTrue: [ aBlock value: value ]
		ifFalse: [ value ]
]

{ #category : #private }
WebsideAPI >> referencesToClass: aClass [
	| binding |
	binding := Smalltalk bindingOf: aClass name asSymbol.
	^ SystemNavigation default allReferencesTo: binding
]

{ #category : #private }
WebsideAPI >> referencesToClass: aClass among: aCollection [

	| binding index |
	binding := Smalltalk bindingOf: aClass name asSymbol.
	index := Smalltalk specialSelectorIndexOrNil: binding.
	^ aCollection
		select:
			[ :m  | m  hasSelector: binding specialSelectorIndex: index ]
]

{ #category : #private }
WebsideAPI >> referencesToString: aString [
	| scope |
	scope := self queriedScope ifNil: [ self queriedClass ].
	^ SystemNavigation default
		allMethodsSelect: [ :m |
			m
				hasLiteralSuchThat: [ :l | 
					l isString
						and: [ l isSymbol not
								and: [ l includesSubstring: aString caseSensitive: false ] ] ] ]
]

{ #category : #private }
WebsideAPI >> referencesToString: aString among: aCollection [
	^ aCollection select: [ :m |
			m
				hasLiteralSuchThat: [ :l | 
					l isString
						and: [ l isSymbol not
								and: [ l includesSubstring: aString caseSensitive: false ] ] ] ]
]

{ #category : #accessing }
WebsideAPI >> request: aTeaRequest [ 
	request := aTeaRequest
]

{ #category : #private }
WebsideAPI >> requestedChange [

	| json change |
	json := NeoJSONReader fromString: request entity.
	change := RBRefactoryChange fromWebsideJson: json.
	change ifNil: [ change := RBRefactoring fromWebsideJson: json ].
	change ifNil: [ change := CmdCommand fromWebsideJson: json ].
	^ change
]

{ #category : #private }
WebsideAPI >> requestedClass [
	| name |
	name := self urlAt: 'name'.
	^ name ifNotNil: [ self classNamed: name ]
]

{ #category : #private }
WebsideAPI >> requestedContext [
	| context name path id debugger index |
	context := self bodyAt: 'context' ifAbsent: [ ^nil ].
	name := context at: 'class' ifAbsent: nil.
	name ifNotNil: [ ^ self classNamed: name ].
	path := context at: 'object' ifAbsent: nil.
	path
		ifNotNil: [ ^ self objectFromPath: path ].
	id := context at: 'workspace' ifAbsent: nil.
	id
		ifNotNil: [ id := UUID fromString: id.
			^ self workspaces at: id ifAbsent: nil ].
	id := context at: 'debugger' ifAbsent: nil.
	id
		ifNotNil: [ id := UUID fromString: id.
			debugger := self debuggers at: id ifAbsent: [ ^ nil ].
			index := context at: 'frame' ifAbsent: [ ^ nil ].
			^ debugger stack at: index asInteger ifAbsent: [ ^ nil ] ].
	^ nil
]

{ #category : #private }
WebsideAPI >> requestedId [
	| id |
	id := self urlAt: 'id'.
	^ id ifNotNil: [ UUID fromString: id]
]

{ #category : #private }
WebsideAPI >> requestedIndex [
	| index |
	index := self urlAt: 'index'.
	^ index ifNotNil: [ index asInteger ]
]

{ #category : #private }
WebsideAPI >> requestedPackage [
	| name |
	name := self urlAt: 'name'.
	^ name
		ifNotNil: [ self packageNamed: name ]
]

{ #category : #private }
WebsideAPI >> requestedSelector [
	| selector |
	selector := self urlAt: 'selector'.
	^ selector ifNotNil: [ selector asSymbol ]
]

{ #category : #private }
WebsideAPI >> requestedSlot [

	| uri |
	uri := self bodyAt: 'uri' ifAbsent: [ ^ nil ].
	uri := uri
		       copyFrom: (uri indexOfSubCollection: '/objects/') + 9
		       to: uri size.
	^ self  objectFromPath: uri
]

{ #category : #private }
WebsideAPI >> requestedTestSuite [

	| packages classes methods suite |

	packages := self bodyAt: 'packages' ifAbsent: [ #(  ) ].
	classes := self bodyAt: 'classes' ifAbsent: [ #(  ) ].
	methods := self bodyAt: 'methods' ifAbsent: [ #(  ) ].
	suite := TestSuite named: self nameForTestSuite.
	packages do: [ :n | 
		| p s |
		p := self packageNamed: n.
		p notNil ifTrue: [ 
			s := self buildTestSuiteForPackage: p.
			suite addTest: s ] ].
	classes do: [ :n | 
		| c |
		c := self classNamed: n.
		(c notNil and: [ c isTestCase ]) ifTrue: [ 
			suite addTest: c buildSuiteFromSelectors ] ].
	methods do: [ :s | 
		| c m |
		c := self classNamed: (s at: 'class' ifAbsent: '').
		m := c compiledMethodAt: (s at: 'selector') asSymbol.
		(m notNil and: [ m isTestMethod ]) ifTrue: [ 
			suite addTest: (c selector: m selector) ] ].
	^ suite
]

{ #category : #'debugging endpoints' }
WebsideAPI >> restartDebugger [
	| debugger context update method |
	debugger := self debuggers
		at: self requestedId
		ifAbsent: [ ^ self notFound ].
	context := debugger stack
		at: self requestedIndex
		ifAbsent: [ ^ self notFound ].
	update := self queryAt: 'update'.
	method := context method.
	(update = 'true' and: [ method notNil ])
		ifTrue: [ context
				privRefreshWith: method classBinding value >> method selector ].
	debugger restart: context.
	^ nil
]

{ #category : #'debugging endpoints' }
WebsideAPI >> resumeDebugger [
	| id debugger |
	id := self requestedId.
	debugger := self debuggers at: id ifAbsent: [ ^ self notFound ].
	self debuggers removeKey: id.
	debugger resume.
	^ nil
]

{ #category : #'testing endpoints' }
WebsideAPI >> runTestRun [
	| id run suite result |
	id := self requestedId.
	run := self testRuns at: id ifAbsent: [ ^ self notFound ].
	suite := run key.
	result := suite resultClass new.
	[ suite run: result ]
		forkAt: Processor userBackgroundPriority
		named: 'Test Run ' , id asString.
	self testRuns at: id put: suite -> result.
	^ suite asWebsideJson
		at: 'id' put: id asString;
		yourself
]

{ #category : #'testing endpoints' }
WebsideAPI >> runTests [
	| suite id result |
	suite := self requestedTestSuite.
	suite ifNil: [ ^ self badRequest: 'Invalid test suite' ].
	id := self newID.
	result := suite resultClass new.
	[ suite run: result ]
		forkAt: Processor userBackgroundPriority
		named: 'Test Run ' , id asString.
	self testRuns at: id put: suite -> result.
	^ suite asWebsideJson
		at: 'id' put: id asString;
		yourself
]

{ #category : #'general endpoints' }
WebsideAPI >> saveImage [

	SessionManager default snapshot: true andQuit: false.
	^ true
]

{ #category : #'code endpoints' }
WebsideAPI >> search [

	| text ignoreCase position type model results grouped  matches |
	text := self
		        queryAt: 'text'
		        ifAbsent: [ ^ self badRequest: 'missing text' ].
	ignoreCase := (self queryAt: 'ignoreCase') = 'true'.
	position := (self queryAt: 'position' ifAbsent: [ #beginning ])
		            asSymbol.
	type := self queryAt: 'type' ifAbsent: 'all'.
	type = 'class' ifTrue: [
		matches := Smalltalk allClasses
			  select: [ :class |
				  class name
					  includesSubstring: text
					  caseSensitive: ignoreCase = 'false' ].
        matches sort: [:a :b | (a alike: text) >= (b alike: text)].
        ^matches collect: [:c | self newJsonObject at: 'type' put: 'class'; at: 'text' put: c name asString; yourself ]].
	model := StSpotterModel new.
	model processSearch: text on: StSpotter new.
	[ 550 milliSeconds wait ] doWhileTrue: [
		model scheduler workers anySatisfy: [ :w | w isBusy ] ].
	results := model activeStep activeQuery candidatesList candidates
		           asArray collect: [ :l | l value ].
	grouped := Dictionary new.
	results
		select: [ :r |
			r websideType notNil and: [
				type = 'all' or: [ r websideType = type ] ] ]
		thenDo: [ :r | grouped at: r asString ifAbsentPut: [ r ] ].
	^ grouped values asArray collect: #asWebsideJson
]

{ #category : #'code endpoints' }
WebsideAPI >> selectorInSource [

	| source position extractor |
	source := self bodyAt: 'source'.
	position := self bodyAt: 'position'.
	extractor := CNSelectorExtractor new.
	^ position
		  ifNil: [ extractor extractSelectorFromSelection: source ]
		  ifNotNil: [
		  extractor extractSelectorFromSource: source atPosition: position ]
]

{ #category : #private }
WebsideAPI >> sendersOf: aSymbol [
	| scope |
	scope := self queriedScope.
	^ scope
		ifNotNil: [ self sendersOf: aSymbol among: scope methods ]
		ifNil: [ SystemNavigation default allSendersOf: aSymbol ]
]

{ #category : #private }
WebsideAPI >> sendersOf: aSymbol among: aCollection [
		
	
	| index |
	index := Smalltalk specialSelectorIndexOrNil: aSymbol.
	^ aCollection
		select:
			[ :m | m hasSelector: aSymbol specialSelectorIndex: index ]
]

{ #category : #accessing }
WebsideAPI >> server: aWebsideServer [
	server := aWebsideServer
]

{ #category : #private }
WebsideAPI >> slot: aString of: anObject ifAbsent: aBlock [
	| index |
	aString asInteger asString = aString ifTrue: [ 
		index := aString asInteger.
		anObject isCollection
			ifTrue: [ 
				index > anObject size ifTrue: [ ^aBlock value ].
				^[anObject at: index] on: Error do: [ anObject basicAt: index ] ] 
			ifFalse: [
				anObject class isVariable ifTrue: [^anObject at: index].
				index > anObject class instSize ifTrue: [^aBlock value].
				^anObject instVarAt: index]].
		^(anObject class allInstVarNames includes: aString)
			ifTrue:[anObject instVarNamed: aString] ifFalse: [ aBlock value ]
]

{ #category : #'debugging endpoints' }
WebsideAPI >> stepIntoDebugger [
	| debugger context |
	debugger := self debuggers
		at: self requestedId
		ifAbsent: [ ^ self notFound ].
	context := debugger stack
		at: self requestedIndex
		ifAbsent: [ ^ self notFound ].
	debugger stepInto: context.
	^ nil
]

{ #category : #'debugging endpoints' }
WebsideAPI >> stepOverDebugger [
	| debugger context |
	debugger := self debuggers
		at: self requestedId
		ifAbsent: [ ^ self notFound ].
	context := debugger stack
		at: self requestedIndex
		ifAbsent: [ ^ self notFound ].
	debugger stepOver: context.
	^ nil
]

{ #category : #'debugging endpoints' }
WebsideAPI >> stepThroughDebugger [

	| debugger context |
	debugger := self debuggers
		            at: self requestedId
		            ifAbsent: [ ^ self notFound ].
	context := debugger stack
		           at: self requestedIndex
		           ifAbsent: [ ^ self notFound ].
	debugger stepThrough:  context.
	^ nil
]

{ #category : #'testing endpoints' }
WebsideAPI >> stopTestRun [
	| id run |
	id := self requestedId.
	run := self testRuns
		at: id
		ifAbsent: [ ^ self notFound ].
	^ nil
]

{ #category : #'code endpoints' }
WebsideAPI >> subclasses [
	| class |
    class := self requestedClass.
    class ifNil: [ ^ self notFound  ].
    ^ class subclasses collect: [:c | c asWebsideJson] 
]

{ #category : #'debugging endpoints' }
WebsideAPI >> terminateDebugger [
	| id debugger |
	id := self requestedId.
	debugger := self debuggers at: id ifAbsent: [ ^ self notFound ].
	self debuggers removeKey: id.
	debugger terminate.
	^ nil
]

{ #category : #private }
WebsideAPI >> testCountOf: test [
	^(test isKindOf: TestSuite) ifTrue: [ test tests sum: [ :t | self testCountOf: t ] ] ifFalse: [ 1 ]
]

{ #category : #'testing endpoints' }
WebsideAPI >> testRunResults [
	| run  |
	run := self testRuns
		at: self requestedId
		ifAbsent: [ ^ self notFound ].
	^ run value asWebsideJson
]

{ #category : #'testing endpoints' }
WebsideAPI >> testRunStatus [
	| id run suite result total summary |
	id := self requestedId.
	run := self testRuns at: id ifAbsent: [ ^ self notFound ].
	suite := run key.
	total := self testCountOf: suite.
	result := run value.
	summary := self newJsonObject
		at: 'run' put: result runCount;
		at: 'passed' put: result passedCount;
		at: 'failed' put: result failureCount;
		at: 'errors' put: result errorCount;
		at: 'skipped' put: result skippedCount;
		yourself.
	^ self newJsonObject
		at: 'id' put: id asString;
		at: 'name' put: suite name;
		at: 'total' put: total;
		at: 'running' put: total > result runCount;
		at: 'summary' put: summary;
		yourself
]

{ #category : #private }
WebsideAPI >> testRuns [
	^ server testRuns
]

{ #category : #'objects endpoints' }
WebsideAPI >> unpinAllObjects [

	self objects removeAll.
	^ nil
]

{ #category : #'objects endpoints' }
WebsideAPI >> unpinObject [

	self objects removeKey: self requestedId ifAbsent: [ ^ self notFound ].
	^ nil
]

{ #category : #'workspaces endpoints' }
WebsideAPI >> updateWorkspace [

	| id workspace source |
	id := self requestedId.
	workspace := self workspaces at: id ifAbsent: [ ^ self notFound ].
	source := self bodyAt: 'source' ifAbsent: ''.
	workspace contents: source.
	^ workspace asWebsideJson
		  at: 'id' put: id asString;
		  yourself
]

{ #category : #private }
WebsideAPI >> urlAt: aString [
	^request at: aString ifAbsent: nil
]

{ #category : #'code endpoints' }
WebsideAPI >> usedCategories [

	^ #(  )
]

{ #category : #'code endpoints' }
WebsideAPI >> usualCategories [
^#()
]

{ #category : #'code endpoints' }
WebsideAPI >> variables [
	| class |
	class := self requestedClass.
	class ifNil: [ ^ self notFound ].
	^ self instanceVariables , self classVariables
]

{ #category : #'workspaces endpoints' }
WebsideAPI >> workspace [

	| id workspace |
	id := self requestedId.
	workspace := self workspaces at: id ifAbsent: [ ^ self notFound ].
	^ workspace asWebsideJson
		  at: 'id' put: id asString;
		  yourself
]

{ #category : #'workspaces endpoints' }
WebsideAPI >> workspaceBindings [

	| id workspace |
	id := self requestedId.
	workspace := self workspaces at: id ifAbsent: [ ^ self notFound ].
	^workspace bindings associations collect: [:a | 
		self newJsonObject
			at: 'name' put: a key;
			at: 'value' put: a value printString;
			yourself]
]

{ #category : #private }
WebsideAPI >> workspaces [
	^ server workspaces
]
